{"version":3,"file":"static/js/434.e74c11f2.chunk.js","mappings":"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","sources":["redux/Contacts/selectors.js","components/ContactListEl/ContactListEl.styled.js","components/ContactListEl/ContactListEl.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["export const getLoading = state => state.contacts.isLoading;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getError = state => state.contacts.error;","import styled from 'styled-components';\n\nexport const ContactElement = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 20px;\n    padding: 5px 10px;\n    margin-top: 10px;\n\n    border: 1px darkblue solid;\n`;\n\nexport const ContactText = styled.p`\n`;\n\nexport const ContactBtn = styled.button`\n    padding: 5px 15px;\n    cursor: pointer;\n    \n    border: none;\n    border-radius: 5px;\n    font-weight: 500;\n    color: darkblue;\n    background-color: skyblue;\n    &:hover, &:focus {\n        background-color: lightblue;\n        box-shadow: 3px 3px 2px 2px rgba(0, 0, 0, 0.3);\n    }\n    transition: background-color 300ms linear, box-shadow 300ms linear;\n`;\n\nexport const ContactName = styled.span`\n    font-weight: 500;\n`;","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from 'redux/Contacts/operations';\nimport PropTypes from 'prop-types';\nimport { ContactElement, ContactText, ContactBtn, ContactName } from './ContactListEl.styled';\n\nexport const ContactListEl = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n\n    const deleteCard = contactId => {\n    dispatch(deleteContact(contactId));\n    };\n    \n    return (\n        <ContactElement> <ContactText> <ContactName>{name}:</ContactName> {number}</ContactText>\n            <ContactBtn onClick={() => deleteCard(id)}>Delete</ContactBtn> \n        </ContactElement>\n    );\n};\n\nContactListEl.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};","import styled from 'styled-components';\n\nexport const Contacts = styled.ul`\n    list-style: none;\n    width: 400px;\n    margin-left: 20px;\n    margin-top: 10px;\n    padding: 0;\n`;\n","import { useSelector } from \"react-redux\";\nimport { getAllContacts, getFilter } from 'redux/Contacts/selectors';\nimport { ContactListEl } from 'components/ContactListEl/ContactListEl';\nimport { Contacts } from './ContactList.styled';\n\nexport const ContactList = () => {\n    const data = useSelector(getAllContacts);\n    const filter = useSelector(getFilter);\n\n    const getFilteredContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return data.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    };\n    \n    const filteredContacts = getFilteredContacts();\n    const isAnyContacts = filteredContacts?.length > 0;\n    const isNoMatches = filteredContacts?.length === 0;\n    \n    return (\n    <>\n    {isAnyContacts &&\n        <Contacts>\n            { filteredContacts.map( contact => { \n                const { id, name, number } = contact;\n            return <ContactListEl  name={name} number={number} key={id} id={id}/>;})\n            }\n        </Contacts>}\n    {isNoMatches && <p>You dont have any contacts or matches!</p>}\n    </>\n    );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n    margin-left: 20px;\n    font-weight: 700;\n`;\n\nexport const FilterInput = styled.input`\n    margin-left: 10px;\n    border: 1px darkblue solid;\n    &:focus {\n        border: 2px darkblue solid;\n        border-radius: 5px;\n        outline: none;\n        box-shadow: 3px 3px 2px 2px rgba(0, 0, 0, 0.3);\n    }\n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { updateFilter } from 'redux/Contacts/contactsSlice';\nimport { getFilter } from 'redux/Contacts/selectors';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    return (\n        <FilterLabel>\n            Find contacts by name\n            <FilterInput type='text' value={filter} onChange={evt => dispatch(updateFilter(evt.currentTarget.value))} />\n        </FilterLabel>\n    );\n};","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    gap: 15px;\n    width:380px;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 10px;\n\n    border: 1px black solid;\n`;\n\nexport const FormInput = styled(Field)`\n  margin-top: 10px;\n  border: 1px darkblue solid;\n    &:focus {\n        border: 2px darkblue solid;\n        border-radius: 5px;\n        outline: none;\n        box-shadow: 3px 3px 2px 2px rgba(0, 0, 0, 0.3);\n        background-color: transparent;\n    }\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column-reverse;\n  font-weight: 500;\n`;\n\nexport const FormBtn = styled.button`\n  padding: 5px 15px;\n    width: 150px;\n    cursor: pointer;\n    \n    border: none;\n    border-radius: 5px;\n    font-weight: 500;\n    color: darkblue;\n    background-color: skyblue;\n    &:hover, &:focus {\n        background-color: lightblue;\n        box-shadow: 3px 3px 2px 2px rgba(0, 0, 0, 0.3);\n    }\n    transition: background-color 300ms linear, box-shadow 300ms linear;\n`;\n\nexport const InputError = styled(ErrorMessage)`\n  width: 300px;\n  text-align: center;\n  color: red;\n  margin-bottom: 15px;\n  font-weight: 500;\n  font-size: 12px;\n`;","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/Contacts/operations';\nimport { getAllContacts } from 'redux/Contacts/selectors';\nimport { FormContact, FormInput, FormLabel, FormBtn, InputError } from 'components/ContactForm/ContactForm.styled';\nimport Notiflix from 'notiflix';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .min(4)\n    .max(10)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n        name: '',\n        number: '',\n    };\n\nexport const ContactForm= () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getAllContacts);\n\n    const handleSubmit = (values, { resetForm }) => {\n        const normalizedName = values.name.toLowerCase();\n        const checkDoubling = contacts.map(contact => contact.name.toLowerCase()).includes(normalizedName);\n\n        if (checkDoubling) {\n        Notiflix.Notify.warning(`${values.name} is already in your contacts!`);\n        } else {\n        dispatch(addContact(values));\n\n        resetForm();\n        }\n    };\n  \n    return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormContact autoComplete=\"off\">\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <FormInput type=\"text\" name=\"name\" placeholder=\"Enter contact name\" />\n        <InputError name=\"name\" component=\"div\" />\n\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <FormInput type=\"tel\" name=\"number\" placeholder=\"Enter contact number\" />\n        <InputError name=\"number\" component=\"div\" />\n          \n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </FormContact>\n    </Formik>\n  );\n};","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const LoadingMessage = styled.div`\n  font-size: 15px;\n  font-weight: 700;\n  text-align: center;\n`;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/Contacts/operations';\nimport { getLoading, getError, getAllContacts } from 'redux/Contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Loader } from 'components/Loader/Loader';\nimport { Container } from 'pages/ContactsPage/ContactsPage.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getAllContacts);\n  const isLoading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {contacts.length > 0 && (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n        </>\n      )}\n      {isLoading && !error && <Loader />}\n      <ContactList />\n\n      {error && <p> {error} </p>}\n    </Container>\n  );\n}"],"names":["getLoading","state","contacts","isLoading","getFilter","filter","getAllContacts","items","getError","error","ContactElement","styled","ContactText","ContactBtn","ContactName","ContactListEl","id","name","number","dispatch","useDispatch","onClick","contactId","deleteContact","Contacts","ContactList","data","useSelector","filteredContacts","normalizedFilter","toLowerCase","contact","includes","getFilteredContacts","isAnyContacts","length","isNoMatches","map","FilterLabel","FilterInput","Filter","type","value","onChange","evt","updateFilter","currentTarget","FormContact","Form","FormInput","Field","FormLabel","FormBtn","InputError","ErrorMessage","schema","yup","shape","matches","required","min","max","initialValues","ContactForm","validationSchema","onSubmit","values","resetForm","normalizedName","Notiflix","addContact","autoComplete","htmlFor","placeholder","component","Container","useEffect","fetchContacts","Loader"],"sourceRoot":""}